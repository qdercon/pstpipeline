% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_funcs.R
\name{make_par_df}
\alias{make_par_df}
\title{Construct a tibble containing individual-level parameter values and baseline
information}
\usage{
make_par_df(
  raw,
  summary,
  rhat_upper,
  ess_lower,
  bsl_trnsfm = function(x) x,
  join_dem = TRUE,
  adj_order = c("happy", "confident", "engaged")
)
}
\arguments{
\item{raw}{Raw data, e.g., saved by \code{\link[=fit_learning_model]{fit_learning_model()}}.}

\item{summary}{A \code{\link[cmdstanr:fit-method-summary]{cmdstanr::summary()}} data frame.}

\item{rhat_upper}{Upper bound of split r-hat values to include. Set to
\code{Inf} to include all participants.}

\item{ess_lower}{Lower bound of effective sample size values to include. Set
to \code{0} to include all participants.}

\item{bsl_trnsfm}{A function to apply to intercept. Defaults to identity.}

\item{join_dem}{Combine output with participant demographic info?}

\item{adj_order}{Same as \code{\link[=fit_learning_model]{fit_learning_model()}}.}
}
\value{
A long format \code{\link[tibble:tibble]{tibble::tibble()}} with model parameters and baseline
participant data.
}
\description{
\code{make_par_df} combines a \code{\link[cmdstanr:fit-method-summary]{cmdstanr::summary()}} with raw data to e.g.,
pass to an outcome model, with filtering based on model fit metrics.
}
\examples{
\dontrun{
fit <- fit_learning_model(
  example_data$nd,
  model = "2a",
  vb = FALSE,
  exp_part = "training"
 )

make_par_df(fit$raw_df, fit$summary, rhat_upper = 1.1, ess_lower = 100)
}

}
