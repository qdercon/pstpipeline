% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fit_learning_model.R
\name{fit_learning_model}
\alias{fit_learning_model}
\title{General function to run Bayesian models using cmdstanr}
\usage{
fit_learning_model(
  df_all,
  model,
  exp_part,
  affect = FALSE,
  affect_sfx = c("3wt", "4wt_trial", "4wt_block", "4wt_time", "5wt_time", "cond_prev"),
  adj_order = c("happy", "confident", "engaged"),
  vb = TRUE,
  ppc = vb,
  par_recovery = FALSE,
  task_excl = TRUE,
  accuracy_excl = FALSE,
  model_checks = !vb,
  save_model_as = "",
  out_dir = "outputs/cmdstan",
  outputs = c("raw_df", "summary", "draws_list"),
  save_outputs = TRUE,
  cores = getOption("mc.cores", 4),
  ...
)
}
\arguments{
\item{df_all}{Raw data outputted from \code{\link[=import_multiple]{import_multiple()}}.}

\item{model}{Learning model to use, choose from \code{1a} or \code{2a}.}

\item{exp_part}{Fit to \code{training} or \code{test}?}

\item{affect}{Fit extended Q-learning model with affect ratings?}

\item{affect_sfx}{String prefix to identify specific affect model, ignored if
\code{affect == FALSE}. Defaults to model with trial-wise passage-of-time.}

\item{adj_order}{Vector of affect adjectives which is used to define their
numerical order in the model output.}

\item{vb}{Use variational inference to get the approximate posterior? Default
is \code{TRUE} for computational efficiency.}

\item{ppc}{Generate quantities including mean parameters, log likelihood, and
posterior predictions? Intended for use with variational algorithm; for MCMC
it is recommended to run the separate \code{\link[=generate_posterior_quantities]{generate_posterior_quantities()}}
function, as this is far less memory intensive.}

\item{par_recovery}{Method to fit model to simulated data (i.e., from
\code{\link[=simulate_QL]{simulate_QL()}}).}

\item{task_excl}{Apply task-related exclusion criteria (catch questions,
digit span = 0)?}

\item{accuracy_excl}{Apply accuracy-based exclusion criteria (final block AB
accuracy >= 0.6)? This is not recommended and is deprecated.}

\item{model_checks}{Runs \code{\link[=check_learning_models]{check_learning_models()}}, returning plots of the
group-level posterior densities for the free parameters, and some visual
model checks (traceplots of the chains, and rank histograms). Note the visual
checks will only be returned if \code{!vb}, as they are only relevant for
MCMC fits, and require the \pkg{bayesplot} package.}

\item{save_model_as}{Name to give to saved model and used to name the .csv
files and outputs. Defaults to the Stan model name.}

\item{out_dir}{Output directory for model fit environment, plus all specified
\code{outputs} if \code{save_outputs = TRUE}.}

\item{outputs}{Specific outputs to return (and save, if \code{save_outputs}).
In addition to the defaults, other options are "model_env" (note this is
saved automatically, regardless of \code{save_outputs}), and "loo_obj". The
latter includes the theoretical expected log-predictive density (ELPD) for a
new dataset, plus the leave-one-out information criterion (LOOIC), a fully
Bayesian metric for model comparison; this requires the \pkg{loo} package.}

\item{save_outputs}{Save the specified outputs to the disk? Will save to
\code{out_dir}.}

\item{cores}{Maximum number of chains to run in parallel. Defaults to
\code{options(mc.cores = cores)}
or 4 if this is not set (this option will then apply for the rest of the
session).}

\item{...}{Other arguments passed to \code{\link[cmdstanr:model-method-sample]{cmdstanr::sample()}} and/or
\link{check_learning_models}. See the
\href{https://mc-stan.org/docs/2_28/cmdstan-guide/index.html}{CmdStan user guide}
for full details and defaults.}
}
\value{
List containing a \link[cmdstanr:CmdStanVB]{cmdstanr::CmdStanVB} or \link[cmdstanr:CmdStanMCMC]{cmdstanr::CmdStanMCMC}
fit object, plus any other outputs passed to \code{outputs}.
}
\description{
\code{fit_learning_model} uses the package \pkg{cmdstanr}, which is a
lightweight R interface to CmdStan. Please note that while it checks if the
C++ toolchain is correctly configured, running this function will not install
CmdStan itself. This may be as simple as running
\code{\link[cmdstanr:install_cmdstan]{cmdstanr::install_cmdstan()}}, but may require some extra effort (e.g.,
pointing R to the install location via \code{\link[cmdstanr:set_cmdstan_path]{cmdstanr::set_cmdstan_path()}}) - see
the \href{https://mc-stan.org/cmdstanr/articles/cmdstanr.html}{cmdstanr vignette}
for more detail.
}
\details{
\code{fit_learning_model} heavily leans on various helper functions from the
\href{https://ccs-lab.github.io/hBayesDM/}{\pkg{hBayesDM}} package, and is not as
flexible; instead it is designed primarily to be less memory-intensive for
our specific use-case and provide only relevant output.
}
\examples{
\dontrun{
# Single learning rate Q-learning model fit to training data with MCMC

data(example_data)
fit1 <- fit_learning_model(
  example_data$nd,
  model = "1a",
  vb = FALSE,
  exp_part = "training",
  iter_warmup = 1000, # default
  iter_sampling = 1000, # default
  chains = 4 # default
)

# Dual learning rate Q-learning model fit to training plus test data with
# variational inference

data(example_data)
fit2 <- fit_learning_model(
  example_data$nd,
  model = "2a",
  exp_part = "test",
  vb = TRUE
)

# Simplest affect model with three weights, fit with variational inference

fit3 <- fit_learning_model(
  example_data$nd,
  model = "2a",
  affect = TRUE,
  affect_sfx = "3wt",
  exp_part = "training",
  algorithm = "fullrank"
)
}

}
