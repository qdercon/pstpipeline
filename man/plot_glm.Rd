% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_glm.R
\name{plot_glm}
\alias{plot_glm}
\title{Plot associations between Q-learning model parameters and variables of
interest}
\usage{
plot_glm(
  par_df,
  plot_var,
  id.col = "parameter",
  test = FALSE,
  grp = id.col,
  grp_labs = NULL,
  alpha_par_nms = NULL,
  plot_together = TRUE,
  ovrll_title = NULL,
  title_font_size = 16,
  title_rel_ht = NULL,
  plt_rows = 1,
  plt_rel_widths = 1,
  cred = c(0.95, 0.99),
  coord_flip = TRUE,
  box_alpha = 0.6,
  box_width = 0.125,
  box_nudge = 0.1,
  pal = NULL,
  font_size = 11,
  font = ""
)
}
\arguments{
\item{par_df}{A \code{\link[posterior:draws_df]{posterior::draws_df()}}, likely obtained from running
\code{\link[=parameter_glm]{parameter_glm()}}.}

\item{plot_var}{The variable of interest to plot (e.g., distanced vs
non-distanced).}

\item{id.col}{The column that contains the QL model parameter names.}

\item{test}{Boolean indicating whether summaries are from the test phase.}

\item{grp}{Optional group to plot separately on each plot, which should be
the interaction variable specified in \code{\link[=parameter_glm]{parameter_glm()}}.}

\item{grp_labs}{Optional labels for the groups defined by \code{grp}. It is
recommended to first run the function with this kept as \code{NULL} to make
sure you label the correct densities.}

\item{alpha_par_nms}{Option to rename learning rate parameters, defaults to
the names from \code{par_df}.}

\item{plot_together}{If \code{TRUE}, returns a panel with all plots plotted
as defined by subsequent arguments. Otherwise a named list of plots is
returned.}

\item{ovrll_title}{Title to set for the whole plot. Ignored if
\code{plot_together == FALSE}.}

\item{title_font_size, title_rel_ht}{Font size, and relative height of the
title compared to the main plot, given as a 2 element vector. Defaults to
\code{16}pt and \code{c(0.15, 1)} respectively. Ignored if
\code{plot_together == FALSE}.}

\item{plt_rows, plt_rel_widths}{Number of rows, and relative widths for the
plotted grid (passed to \code{\link[cowplot:plot_grid]{cowplot::plot_grid()}}). Defaults to \code{1}
(i.e. single row, all equal widths). Ignored if \code{plot_together == FALSE}.}

\item{cred}{Vector, length 2, which defines the \% HDI covered by the boxplot
boxes and lines respectively.}

\item{coord_flip}{Plot horizontal (\code{TRUE}) or vertical (\code{FALSE})
densities.}

\item{box_alpha, box_width, box_nudge}{Control the transparency, size, and
position of the summary boxplot.}

\item{pal, font_size, font}{Same as \code{\link[=plot_import]{plot_import()}}.}
}
\value{
Either a list of ggplots or a \code{\link[cowplot:plot_grid]{cowplot::plot_grid()}} if
\code{plot_together == TRUE}.
}
\description{
\code{plot_glm} is designed to plot the results of fitting Bayesian GLMs,
with QL model parameters as the response variables, via the \code{\link[=parameter_glm]{parameter_glm()}}
function. It plots both a box-and-whisker plot (defaulting to 95\% HDIs for
the box, and 99\% HDIs for the lines), plus the posterior distribution of
coefficients (half-violin plots made up of the individual posterior draws).
}
\examples{
\dontrun{
Comparing parameters across groups

data(example_data)

fit_nd <- fit_learning_model(
  example_data$nd,
  model = "2a",
  vb = FALSE,
  exp_part = "training"
)
fit_dis <- fit_learning_model(
  example_data$dis,
  model = "2a",
  vb = FALSE,
  exp_part = "training"
)

distanced <- parameter_glm(
  summary_df = list(fit_nd$summary, fit_dis$summary),
  raw_df = list(fit_nd$raw_df, fit_dis$raw_df),
  var_of_interest = "distanced",
  covariates = c("age", "sex", "digit_span"),
  iter_warmup = 1000, iter_sampling = 1000
)
plot_glm(distanced, plot_var = "distanced")
}

}
